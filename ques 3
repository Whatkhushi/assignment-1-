#include <iostream>
#include <vector>
#include <algorithm>

struct Interval {
    int start;
    int end;
    
    Interval(int s, int e) : start(s), end(e) {}
};

bool compareIntervals(const Interval& a, const Interval& b) {
    return a.start < b.start;
}

std::vector<Interval> mergeIntervals(const std::vector<Interval>& intervals) {
    if (intervals.empty()) {
        return {};
    }

    std::vector<Interval> merged;
    
    // Sort intervals based on their start values
    std::vector<Interval> sortedIntervals = intervals;
    std::sort(sortedIntervals.begin(), sortedIntervals.end(), compareIntervals);

    // Merge overlapping intervals
    merged.push_back(sortedIntervals[0]);
    for (int i = 1; i < sortedIntervals.size(); ++i) {
        if (sortedIntervals[i].start <= merged.back().end) {
            // Overlapping intervals, merge them
            merged.back().end = std::max(merged.back().end, sortedIntervals[i].end);
        } else {
            // Non-overlapping interval, add it to the result
            merged.push_back(sortedIntervals[i]);
        }
    }

    return merged;
}

int main() {
    std::vector<Interval> intervals = {{1, 3}, {2, 6}, {8, 10}, {15, 18}};

    std::vector<Interval> mergedIntervals = mergeIntervals(intervals);

    // Output the merged intervals
    std::cout << "Merged Intervals: ";
    for (const Interval& interval : mergedIntervals) {
        std::cout << "[" << interval.start << ", " << interval.end << "] ";
    }
    std::cout << std::endl;

    return 0;
}
