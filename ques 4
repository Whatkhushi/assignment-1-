#include <iostream>
#include <vector>
#include <algorithm>

std::vector<std::vector<int>> threeSum(std::vector<int>& nums, int target) {
    std::vector<std::vector<int>> result;

    // Sort the input array
    std::sort(nums.begin(), nums.end());

    // Fix the first element and use two pointers approach for the rest
    for (int i = 0; i < nums.size() - 2; ++i) {
        // Skip duplicate elements for the first element
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue;
        }

        int left = i + 1;
        int right = nums.size() - 1;

        while (left < right) {
            int currentSum = nums[i] + nums[left] + nums[right];

            if (currentSum == target) {
                // Found a triplet, add it to the result
                result.push_back({nums[i], nums[left], nums[right]});

                // Skip duplicate elements for the second element
                while (left < right && nums[left] == nums[left + 1]) {
                    left++;
                }

                // Skip duplicate elements for the third element
                while (left < right && nums[right] == nums[right - 1]) {
                    right--;
                }

                left++;
                right--;
            } else if (currentSum < target) {
                left++;
            } else {
                right--;
            }
        }
    }

    return result;
}

int main() {
    std::vector<int> nums = {-1, 0, 1, 2, -1, -4};
    int target = 0;

    std::vector<std::vector<int>> result = threeSum(nums, target);

    // Output the triplets that sum up to the target
    std::cout << "Triplets that sum up to " << target << ":\n";
    for (const auto& triplet : result) {
        std::cout << "[" << triplet[0] << ", " << triplet[1] << ", " << triplet[2] << "]\n";
    }

    return 0;
}
